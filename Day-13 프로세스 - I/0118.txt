<프로세스 관리>

init : 부팅 시 가장 먼저 실행되는 시스템 초기화 프로세스


<프로세스>
-커널의 관리 하에 현재 시스템 동작 중인 프로그램
-init을 제외한 모든 프로세스는 부모-자식 관계를 가지고 있다.

<프로세스 종류>
데몬 (Daemon) 프로세스
:  커널에 의해서 실행되는 있는 특정 서비스를 제공한다.
   ex) 웹 서버를 동작하기 위해서는 httpd라는 프로세스가 동작하고 있으며 httpd를
 	웹 서버 데몬이라고 한다.

부모 프로세스
: 부모 프로세스는 다른 프로세스를 만들며 init을 제외한 모든 프로세스는 부모 프로세스를 가지고 있다. 

자식 프로세스
: 부모 프로세스에 의해 만들어지는 프로세스이다. 
  자식 프로세스는 종료시 부모 프로세스에게 결과를 전달하고 종료된다.

고아 프로세스
:  자식 프로세스보다 먼저 부모 프로세스가 종료되었을 때 해당 자식 프로세스는 고아 프로세스가 되어 init 하에 관리를 받는다.

좀비 프로세스
: 자식 프로세스의 종료신호를 부모프로세스가 처리하지 못할 경우 자식 프로세스는 좀비 프로세스가 된다.

================================================
ps (Process Status) 
: 시스템에 동작중인 프로세스 확인
#ps : 현재 터미널에 실행되고 있는 프로세스의 간단한 정보만 출력

옵션	의미
-e	모든 프로세스에 대한 리스트를 출력
-f	full format으로 출력

-a	다른 사용자들의 프로세스도 출력
-u	사용자 이름, 시간 등 상세한 정보를 출력
-x	지금 사용되는 있는 모든 프로세스를 출력

# ps -ef    ->
UID	프로세스를 실행시킨 프로세스 소유자를 의미
PID	실행된 프로세스에 부여된 숫자를 의미
PPID	부모 프로세스의  PID
C	프로세스 스케쥴링을 위한 cpu 사용량을 나타냄( 현재는 사용하지 않음)
STIME	Start TIME 프로세스가 시작된 시간
TTY	TeleTYpe 프로세스가 연결된 제어 터미널 표시 (?:터미널에 연결되지않음)
TIME	프로세스에 의해 사용된 cpu 사용 시간
CMD	실행된 프로세스명 , 명령어

# ps -aux     -> 설명(공유폴더-사진)
================================================
kill 
: 프로세스 종료
# kill -[시그널] [PID]

-ㅣ	시그널 종류 확인
자주 사용하는 시그널
2) SIGINT	프로세스 종료
9) SIGKILL	프로세스 강제종료
15) SIGTERM	프로세스 종료
19) SIGSTOP	프로세스 정지
18) SIGCONT	정지한 프로세스 재시작


#pkill sleep
: sleep으로 시작하는 프로세스 모두 강제종료

#pstree
: 현재 프로세스의 계층구조를 트리형식으로 보여줌

ex) # kill -9 1361  =# kill -SIGKILL 1361
----------------------------------------------------------------------------------
<프로세스 동작 형태>

포어그라운드 프로세스
: 프롬프트에서 입력하는 대부분의 명령어는 포어 그라운드로 동작
  명령어의 실행과정이나 결과를 화면에 출력해줌
  포어 그라운드로 실행되는 프로세스는 종료되길 기다렸다가 
  종료되면 프롬프트를 보여주어 명령대기 상태로 변환된다.
  ex) # cp -r /usr /home 는 시간이 오래걸리기 때문에 
        한동안 프롬프트가 안보이다가 완료되면 프롬포트를 보여준다.

  
백 그라운드 프로세스
: 프로세스의 종료여부에 관계없이 즉시 명령 대기 상태가 되어
  다른 명령어를 실행 시킬수 있음
  백 그라운드로 실행시키기 위해서는 &를 붙여서 사용
  장시간 실행되어야하는 경우에 주로 사용
  ex) [명령어] & [작업번호] [PID]        # cp -r /usr /practice & [2] 1441

jobs
: 백그라운드에서 동작하고 있는 프로세스를 확인

fg
: 백그라운드 작업을 포어 그라운드로 변경 시 사용

bg
: 포어그라운드 작업을 백그라운드로 변경시 사용

ex)
# sleep 9999			포어 그라운드 실행				Ctrl + Z	:(19번 시그널)		정지 ([3]+  Stopped - 작업번호 : 3)
# ps -aux | grep sleep		현재상태 확인 (T:정지상태)
bg %[작업번호]			백 그라운드로 실행

# cp -r /usr /practice/day1 &	백그라운드 실행
jobs				백 그라운드 작업번호 확인
fg %[작업번호]			포어 그라운드로 실행


좀비 프로세스 제거 방법
#ps -aux 명령어 적용시 (STAT 필드=Z)
해결방법 : SIGCHILD or 부모필드 죽인다. 






















